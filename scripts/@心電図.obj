@心電図
--track0:サイズ,0,200,10
--track1:振幅,0,500,100
--track2:間隔,0,1000,50
--track3:幅,0,1000,300
--dialog:色/col,color="0xffffff";分解能,resolution=0.1;個数,amount=1;図形,figure="円";定数,N={0.7, 5, 5, 2.5, 4, 1.2, 0.4, 0.1};分割位置,div={4,5,6,8,12,15};線形/chk,linear=0;仮想バッファ/chk,modeBuffer=0;

local size, amp, space, width = obj.track0, obj.track1, obj.track2, obj.track3
if size==0 then
	return
end
if width+space==0 then
	return
end

obj.load("figure",figure,color,size)

amount = math.floor(amount)
local zoom, aspect = obj.getvalue("zoom")/100, obj.getvalue("aspect")
local rx, ry, rz = math.rad(obj.getvalue("rx")), math.rad(obj.getvalue("ry")), math.rad(obj.getvalue("rz"))

if modeBuffer==0 then
	if 0<aspect then
		space, width = space * (1-aspect), width * (1-aspect)
	elseif aspect<0 then
		amp = amp * (1 + aspect)
	end
	space, width, amp = space * zoom, width * zoom, amp * zoom
end

local waveleng = space+width
if modeBuffer==1 then
	local m1 = -amp*N[4] + amp*(N[1]/10)*-(2*math.sin(N[2])+math.log(N[3]+1))
	local m2 = amp*N[5] -amp*N[4]+amp*(N[1]/10)*-(2*math.sin(N[2])+math.log(N[3]+1))
	m = math.max(math.abs(m1), math.abs(m2))
	obj.setoption("drawtarget", "tempbuffer", waveleng*amount, math.abs(m * 2)+size)
end

for i=1, amount do
	for x=0, waveleng, resolution do
		ox,oy,oz = obj.ox - amount * (waveleng/2) + (i-1)*waveleng, obj.oy, obj.oz

		if x<=space/2 then
			ox = ox + x

		elseif space/2<x and x<=(space/2+width) then
			ox = ox + x
			px = x - space/2

			if linear == 0 then
				if px<=width*div[1]/div[6] then
					lx = px * (div[6]/(div[1]*width))
					oy = amp*(N[1]/10)*-(2*math.sin(N[2]*lx)+math.log(N[3]*lx+1))

				elseif width*div[1]/div[6]<px and px<=width*div[2]/div[6] then
					lx = (px - width*(div[1]/div[6])) * (div[6]/((div[2]-div[1])*width))
					oy= -amp*N[4]*lx + amp*(N[1]/10)*-(2*math.sin(N[2])+math.log(N[3]+1))

				elseif width*div[2]/div[6]<px and px<=width*div[3]/div[6] then
					lx = (px - width*(div[2]/div[6])) * (div[6]/((div[3]-div[2])*width))
					oy = amp*N[5]*lx -amp*N[4]+amp*(N[1]/10)*-(2*math.sin(N[2])+math.log(N[3]+1))

				elseif width*div[3]/div[6]<px and px<=width*div[4]/div[6] then
					lx = (px - width*(div[3]/div[6])) * (div[6]/((div[4]-div[3])*width))
					oy = -amp*N[6]*((lx-1)^3+1) + amp*N[5]-amp*N[4]+amp*(N[1]/10)*-(2*math.sin(N[2])+math.log(N[3]+1))

				elseif width*div[4]/div[6]<px and px<=width*div[5]/div[6] then
					lx = (px - width*(div[4]/div[6])) * (div[6]/((div[5]-div[4])*width))
					m = -amp*N[6]+amp*N[5]-amp*N[4]+amp*(N[1]/10)*-(2*math.sin(N[2])+math.log(N[3]+1))
					oy = amp* N[7] * math.sin(math.pi *(lx^2))*math.log((lx^2))-(lx*m) + m

				elseif width*div[5]/div[6]<px and px<=width*div[6]/div[6] then
					lx = (px - width*(div[5]/div[6])) * (div[6]/((div[6]-div[5])*width))
					m = amp* N[7] * math.sin(math.pi)*math.log(1)
					oy = amp* N[8] * math.sin(math.pi *(lx^2))*math.log((lx^2)) + m
				end
			elseif linear == 1 then
				if px<=width*(div[1]/2)/div[6] then
					lx = px * (div[6]/((div[1]/2)*width))
					oy = -lx*amp*N[1]

				elseif width*(div[1]/2)/div[6]<px and px<=width*div[1]/div[6] then
					lx = (px - width*((div[1]/2)/div[6])) * (div[6]/((div[1]/2)*width))
					oy = lx*amp*(N[2]/5) - amp*N[1]

				elseif width*div[1]/div[6]<px and px<=width*div[2]/div[6] then
					lx = (px - width*(div[1]/div[6])) * (div[6]/((div[2]-div[1])*width))
					oy= -amp*N[4]*lx + amp*(N[2]/5) - amp*N[1]

				elseif width*div[2]/div[6]<px and px<=width*div[3]/div[6] then
					lx = (px - width*(div[2]/div[6])) * (div[6]/((div[3]-div[2])*width))
					oy= amp*N[5]*lx -amp*N[4] + amp*(N[2]/5) - amp*N[1]

				elseif width*div[3]/div[6]<px and px<=width*div[4]/div[6] then
					lx = (px - width*(div[3]/div[6])) * (div[6]/((div[4]-div[3])*width))
					m = amp*N[5] -amp*N[4] + amp*(N[2]/5) - amp*N[1]
					oy = (-lx * m) + m

				elseif width*div[4]/div[6]<px and px<=width*div[5]/div[6] then
					lx = (px - width*(div[4]/div[6])) * (div[6]/((div[5]-div[4])*width))
					m = amp*N[5] -amp*N[4] + amp*(N[2]/5) - amp*N[1]
					oy = 0

				elseif width*div[5]/div[6]<px and px<=width* (div[5]+(div[6]-div[5])/2)/div[6] then
					lx = (px - width*(div[5]/div[6])) * (div[6]/((div[6]-div[5])/2*width))
					oy = -amp*N[6]*lx

				elseif width*div[5]/div[6]<px and px<=width*div[6]/div[6] then
					lx = (px - width*(div[5]+(div[6]-div[5])/2)/div[6]) * (div[6]/((div[6]-div[5])/2*width))
					oy = amp*N[6]*lx - amp*N[6]
				end
			end

		elseif (space/2+width)<x and x<=waveleng then
			ox = ox + x
		end

		if modeBuffer==0 then
			--rz
			sx = ox*math.cos(rz) - oy*math.sin(rz)
			sy = ox*math.sin(rz) + oy*math.cos(rz)
			ox, oy = sx, sy
			--ry
			sx = ox*math.cos(ry) + oz*math.sin(ry)
			sz = -ox*math.sin(ry) + oz*math.cos(ry)
			ox, oz = sx, sz
			--rx
			sy = oy*math.cos(rx) - oz*math.sin(rx)
			sz = oy*math.sin(rx) + oz*math.cos(rx)
			oy, oz = sy, sz
		end

		obj.draw(ox, oy, oz)
	end
end

if modeBuffer==1 then
	obj.load("tempbuffer")
end
