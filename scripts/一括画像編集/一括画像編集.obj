--track0:入力形式,0,3,1,1
--track1:出力形式,0,3,1,1
--track2:JPG品質,0,100,90
--track3:文字サイズ,0,400,34,1
--check0:有効,0
--dialog:処理ファイル(lua),local lua_name="色調補正";情報表示/chk,local mode_info=0;上書き保存/chk,local mode_overwrite=0;下位フォルダ/chk,mode_child=1;引数1,local data1="";引数2,local data2="";引数3,local data3="";引数4,local data4="";

-----------------
---- 変数定義 ----
-----------------
local log = ""
local textmodule = require("textmodule")
local rikky_module = require("rikky_module")

local OUT_PATH = obj.getinfo("script_path").."image\\out\\"
local IN_PATH = obj.getinfo("script_path").."image\\"
local DATA_PATH = obj.getinfo("script_path").."image\\lua\\"..lua_name..".lua"
local ACTIVE = obj.check0
local IN_FORMAT = obj.track0
local OUT_FORMAT = obj.track1
local JPG_QUALITY = obj.track2
local TEXT_SCALE = obj.track3
local PROCESSED_COUNT = 0
local FORMAT_LIST = {"png", "jpg", "bmp"}
local AVAILABLE_FORMAT = {{"png"}, {"jpg", "jpeg"}, {"bmp"}}
_G["data"] = {data1, data2, data3, data4}

--textmoduleのバージョン確認
if textmodule.getinfo("version", 2)<24 then
	return
end

--------------
---- 関数 ----
--------------
--デバッグ文出力
local function debug_log(msg)
	if type(msg)~="string" then
		return
	end

	log = log .. "["..textmodule.os.date("%F %X", textmodule.os.time()).."] "
	log = log .. msg .. "\n"
end

--ファイルの有無
local function exist(dir)
	if type(dir)~="string" then
		return
	end
	return textmodule.filesystem.exists(dir)
end

--ディレクトリ作成
local function mkdir(dir)
	if type(dir)~="string" then
		return
	end
	textmodule.filesystem.create_all(dir)
end

--画像ファイル生成
local function generate_img_file(format, path, file_name)
	local f = textmodule.string.lower(format)
	if OUT_FORMAT==0 then
		if f=="png" then
			rikky_module.png(path..file_name.."."..format)
		elseif f=="jpg" or format=="jpeg" then
			rikky_module.jpg(path..file_name.."."..format, JPG_QUALITY)
		elseif f=="bmp" then
			rikky_module.bmp(path..file_name.."."..format)
		end
	else
		if f=="png" then
			rikky_module.png(path..file_name..".png")
		elseif f=="jpg" or format=="jpeg" then
			rikky_module.jpg(path..file_name..".jpg", JPG_QUALITY)
		elseif f=="bmp" then
			rikky_module.bmp(path..file_name..".bmp")
		end
	end
end

--画像保存
local function save_image(list, in_path, out_path, out_format)
	for i,v in pairs(list) do
		local fileName = v.name
		obj.load("image", v.full)

		if exist(DATA_PATH) then
			dofile(DATA_PATH)
		end
		if fileName~="" and fileName~=nil then
			local f = ""
			if out_format==0 then
				f = textmodule.string.lower(v.format)
			else
				f = FORMAT_LIST[out_format]
			end
			generate_img_file(f, out_path, v.name)

			PROCESSED_COUNT = PROCESSED_COUNT + 1
		end

	end
end

--ファイル一覧取得
local function get_filelist(dir, format)
	local temp = rikky_module.dir(dir, "*all")
	local res = {}

	for i,v in pairs(temp) do
		local temp_name = textmodule.string.gsub(v, dir:gsub("\\", "\\\\"), "")
		local p = textmodule.string.len(temp_name) - textmodule.string.find(textmodule.string.reverse(temp_name), "(\\.)") + 1
		local file = { full = v, name = textmodule.string.sub(temp_name, 1, p-1), format = textmodule.string.sub(temp_name, p+1) }

		local ff = textmodule.string.lower(file.format)
		if format==0 then
			for j=1,#AVAILABLE_FORMAT do
				for k=1,#AVAILABLE_FORMAT[j] do
					if AVAILABLE_FORMAT[j][k]==ff then
						table.insert(res, file)
						break
					end
				end
			end

		else
			for j=1,#AVAILABLE_FORMAT[format] do
				if AVAILABLE_FORMAT[format][j]==ff then
					table.insert(res, file)
					break
				end
			end

		end
	end

	return res
end

------------------
---- 画像処理 ----
------------------
obj.setfont("", TEXT_SCALE)

--処理ファイル
if exist(DATA_PATH) then
	debug_log(lua_name.."を使用して処理を行います。")
else
	debug_log("処理ファイルがありません。")
	obj.load("text", log)
	return
end

--上書きモード
if mode_overwrite==1 then
	OUT_PATH = obj.getinfo("script_path").."image\\"
	OUT_FORMAT = IN_FORMAT
	debug_log("上書き保存モードが有効化されています。")
end

--情報表示
if mode_info==1 then
	local s = dofile(DATA_PATH)
	local str = "["..lua_name..".lua]\n"
	str = str.."解説："..s.main.."\n\n"
	str = str.."引数1："..s.data1.."\n"
	str = str.."引数2："..s.data2.."\n"
	str = str.."引数3："..s.data3.."\n"
	str = str.."引数4："..s.data4.."\n"
	obj.load("text", str)
	return
end

--本処理
if ACTIVE then
	local fileList = get_filelist(IN_PATH, IN_FORMAT)
	if not(exist(OUT_PATH)) then
		mkdir(OUT_PATH)
	end

	save_image(fileList, IN_PATH, OUT_PATH, OUT_FORMAT)
	debug_log("ルートフォルダ内のファイルを処理しました。")

	--子フォルダに適用
	if mode_child==1 then
		local folderList = rikky_module.dir(IN_PATH, "")

		for j,w in pairs(folderList) do
			local folderName = textmodule.string.gsub(w, IN_PATH:gsub("\\", "\\\\"), "")
			if folderName~="lua" and folderName~="out" then
				local T_IN_PATH = IN_PATH .. folderName .. "\\"
				local T_OUT_PATH = OUT_PATH .. folderName .. "\\"

				if not(exist(T_OUT_PATH)) then
					mkdir(T_OUT_PATH)
				end

				fileList = get_filelist(T_IN_PATH, IN_FORMAT)
				save_image(fileList, T_IN_PATH, T_OUT_PATH, OUT_FORMAT)
				debug_log(folderName .. "フォルダ内のファイルを処理しました。")
			end
		end

	end

else
	if IN_FORMAT==0 then
		debug_log("現在の入力形式は 全て です。")
	else
		debug_log("現在の入力形式は "..textmodule.string.upper(FORMAT_LIST[IN_FORMAT]).." です。")
	end

	if OUT_FORMAT==0 then
		debug_log("現在の出力形式は、自動で決定されます。")
	else
		debug_log("現在の出力形式は "..textmodule.string.upper(FORMAT_LIST[OUT_FORMAT]).." です。")
	end

	debug_log("このスクリプトは無効化されています。")
	obj.load("text", log)
	return
end

--描画
debug_log(tostring(PROCESSED_COUNT).."件の画像の処理に成功しました。")
obj.load("text", log)
obj.draw()
