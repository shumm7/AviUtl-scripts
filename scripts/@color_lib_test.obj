@色表示(RGB)
--track0:Size,1,4000,100
--track1:R,0,255,0,1
--track2:G,0,255,0,1
--track3:B,0,255,0,1
--dialog:図形,fig="四角形";色,color="";

if color== nil or color == "" then
	COLOR_LIB_DIR = string.gsub(obj.getinfo("script_path").."color_lib\\color_lib.lua", "\\", "/")
	dofile(COLOR_LIB_DIR)
	color = RGB(obj.track1, obj.track2, obj.track3)
	debug_print(color)
	obj.load("figure", fig, color, obj.track0)
else
	obj.load("figure", fig, color, obj.track0)
end
obj.draw()

@色表示(HSV)
--track0:Size,1,1000,100
--track1:H,0,360,0,1
--track2:S,0,100,0,1
--track3:V,0,100,0,1
--dialog:図形,fig="四角形";色,color="";

if color== nil or color == "" then
	COLOR_LIB_DIR = string.gsub(obj.getinfo("script_path").."color_lib\\color_lib.lua", "\\", "/")
	dofile(COLOR_LIB_DIR)
	color = HSV(obj.track1, obj.track2, obj.track3)
	obj.load("figure", fig, color, obj.track0)
else
	obj.load("figure", fig, color, obj.track0)
end
obj.draw()

@色検索
--track0:Size,1,1000,100
--dialog:検索文字列,string="";リスト名,list="wikipedia_color";項目を限定,mode={"name", "japanese", "english"};図形,fig="四角形";検索モード,searchMode=1;
--check0:Guide,0

if obj.check0 then
	string = "ダイアログの「検索文字列」に文字列を入力すると、\nそれに近い色を検索して表示します。\n ※半角英数字1文字だと、文字コードの関係でおかしくなることがあります。\n\n「項目を限定」では、テーブルで検索する項目を指定できます。\n（\"name\",\"color\",\"japanese\",\"english\"）\n\n「検索モード」は検索を行う際のアルゴリズムを指定します。\n（0:完全一致, 1:部分一致, 2:前方一致, 3:後方一致）\n\n既知のバグとして、検索文字列に長音「ー」を使うとバグります。"
	obj.load("text", string)
	obj.draw()
	return
end

COLOR_LIB_DIR = string.gsub(obj.getinfo("script_path").."color_lib\\color_lib.lua", "\\", "/")
dofile(COLOR_LIB_DIR)

r = findColor(list, string, mode, searchMode)

if r==nil then
	obj.load("text", "色が見つかりませんでした")
	obj.draw()
else
	if r["color"]~="" and r["color"]~=nil then
		obj.load("figure", fig, r["color"], obj.track0)
		obj.draw()
	end
	obj.load("text", r["name"].." ("..r["japanese"].."/"..r["english"]..")")
	obj.draw(0,obj.track0/2+50)
end
