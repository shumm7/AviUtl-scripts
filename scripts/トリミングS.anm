--トリミングS by しゅう  ver1.1 2022/02/22

--track0:透明度,0,100,30
--check0:トリミング設定の表示,1
--dialog:トリミングの反転/chk,mode_invert=0;座標,tpos={-100,100,100,-100};情報表示/chk,mode_info=0;文字サイズ,font_size=34;フォント,font_family="MS UI Gothic";

require("S_Trimming_Module")
require("textmodule")

local data, w, h = obj.getpixeldata()
local zoom = obj.getvalue("zoom")/100 * obj.zoom
local o_zoom = obj.zoom
local px1, py1 = tpos[1]/o_zoom+w/2, tpos[2]/o_zoom+h/2
local px2, py2 = tpos[3]/o_zoom+w/2, tpos[4]/o_zoom+h/2
local mode_invert = mode_invert==1

if obj.check0 then
  obj.setanchor("tpos", 2)

  res, nw, nh, ppx1, ppy1, ppx2, ppy2 = S_Trimming_Module.trim(data, w, h, px1, py1, px2, py2, obj.check0, mode_invert, obj.track0)
  if not(res) then return end
  obj.putpixeldata(data)
  obj.draw()

  if mode_info==1 then
    obj.setfont(font_family, font_size, 3)

    obj.load("text", string.format("%.1d x %.1d", nw, nh)) --画像の大きさ
    obj.draw(0,0)

    obj.load("text", string.format("(%.1d, %01d)", ppx1, ppy1))
    obj.draw((ppx1-w/2)*zoom, (ppy1-h/2)*zoom)
    textmodule.debug_print(ppx1)

    obj.load("text", string.format("(%.1d, %01d)", ppx2, ppy2))
    obj.draw((ppx2-w/2)*zoom, (ppy2-h/2)*zoom)
  end


else
  res, nw, nh, ppx1, ppy1, ppx2, ppy2 = S_Trimming_Module.trim(data, w, h, px1, py1, px2, py2, obj.check0, mode_invert, obj.track0)
  if not(res) then return end
  obj.putpixeldata(data)

  if not(mode_invert) then
    obj.setoption("drawtarget","tempbuffer", nw, nh)
    obj.drawpoly(-nw/2,-nh/2,0, nw/2,-nh/2,0, nw/2,nh/2,0, -nw/2,nh/2,0, ppx1,ppy1, ppx2,ppy1, ppx2,ppy2, ppx1,ppy2)

    obj.load("tempbuffer")
  end

  obj.draw()
end
