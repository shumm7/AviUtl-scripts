--[[

----------------------------------------------------------------------------------------------------------------------------
   _  _  _  _      _  _  _  _  _     _           _     _  _  _  _  _     _                 _                   _  _  _  _
 _(_)(_)(_)(_)_   (_)(_)(_)(_)(_)   (_)         (_)   (_)(_)(_)(_)(_)   (_)               (_)                _(_)(_)(_)(_)_
(_)          (_)        (_)         (_)         (_)   (_)               (_)               (_)               (_)          (_)
(_)          (_)        (_)         (_) _  _  _ (_)   (_) _  _          (_)               (_)               (_)          (_)
(_)          (_)        (_)         (_)(_)(_)(_)(_)   (_)(_)(_)         (_)               (_)               (_)          (_)
(_)          (_)        (_)         (_)         (_)   (_)               (_)               (_)               (_)          (_)
(_)_  _  _  _(_)        (_)         (_)         (_)   (_) _  _  _  _    (_) _  _  _  _    (_) _  _  _  _    (_)_  _  _  _(_)
  (_)(_)(_)(_)          (_)         (_)         (_)   (_)(_)(_)(_)(_)   (_)(_)(_)(_)(_)   (_)(_)(_)(_)(_)     (_)(_)(_)(_)

----------------------------------------------------------------------------------------------------------------------------

「オセロ.obj」は、AviUtlの再生ウィンドウ上で遊べるミニゲームです。
カスタムオブジェクトとして、利用することが出来ます。

※※※　必ず編集中のプロジェクトを保存してから使用してください　※※※


☆ 導入方法　☆
	1. 「rikky_module」を導入します。
  2. 「オセロ.obj」をscriptフォルダかその下の階層のフォルダにいれてください。
	3. 「オセロ.obj」と同じ場所に「othello」フォルダを配置してください。
	4. カスタムオブジェクトから「オセロ」を選択してください。

☆　テスト環境　☆
　AviUtl 1.10
	exedit 0.93rc1
	rikky_module 0.1.delta

☆　遊び方　☆
	オセロをタイムラインに置いたら、画面にオセロの盤面が表示されているかを確認してください。
	一番下のトラックバー「プレイター数」で、遊ぶ人数を変更できます。
	　　→　1:CPUと対戦（自動で石を打ちます）　　2:プレイヤー同士の対戦

	タイムラインを再生させながら、オセロの盤面をマウスでクリックすると、石が置かれます。
	盤面のデータは、常にothelloフォルダ内に保存されます。
	　（盤面データには、石の場所と手番が記録されています）

	「データをリセットする」のチェックボックスをONにすると、データを初手に書き換えて、保存します。
	プレイするときは、必ずOFFにしてください。

☆　設定項目　☆

＊トラックバー
　・サイズ　　　　盤面全体のサイズ
　・石サイズ　　　角マスに占める石の大きさの割合
　・文字サイズ　　盤面全体のサイズに対する、文字の大きさの割合
　・プレイヤー数　1:CPU vs プレイヤー　　2:プレイヤー vs プレイヤー

＊チェックボックス
　・データをリセットする　ONの間、常に盤面データを初手のものに書き換える

＊設定ダイアログ
　・盤面データ名　　　　　盤面データを保存する際の名前（拡張子などは不要）
　・盤面色　　　　　　　　盤面の色
　・枠色　　　　　　　　　盤面の枠の色
　・黒石色　　　　　　　　黒石の色
　・白石色　　　　　　　　白石の色
　・枠太さ　　　　　　　　盤面の枠の太さ
　・外枠太さ　　　　　　　盤面の外枠の太さ
　・選択時UI表示　　　　　0:表示しない　　1:クリックしたマスが光る　　2:マウスで触れたマスが光る
　・単純なクリック挙動　　ON:マウスを離した瞬間に石を置く　OFF:マウスがクリックされている時に石を置く（離した瞬間を認識しない）
　・プレイヤーが後手　　　ON:プレイヤーが白（後手）　　　　OFF:プレイヤーが黒（後手）
　・CPU探索深度　　　　　CPU思考時に盤面を探索する深さ（3以下推奨）
　・CPU待機時間　　　　　手番が回ってきたときに、CPUが一旦待機する時間
　・情報を表示　　　　　　ON:盤面情報をテキストで表示する　OFF:表示しない

☆　注意点　☆
　・再生停止中でも一応プレイできますが、再生しながらのプレイをおすすめします。
　・CPUの探索深度を深くしすぎると、AviUtlの動作が不安定になる場合があります。
　・拡大率やZ軸座標の変更には、今の所対応していません。
　　（画面の座標で検知しているため、拡大率を変えると位置がズレます）
　・本スクリプトで発生した損害に、いかなる責任も負いません。

☆　更新履歴　☆
　[2021-07-09] 0.1: 初版
  [2021-07-09] 0.2: CPU対戦モードを追加
  [2021-07-09] 0.3: 座標・回転・拡大率の処理を追加
]]


--track0:サイズ,0,2000,500,1
--track1:石サイズ,0,1,0.8,0.01
--track2:文字サイズ,0,1,0.1,0.01
--track3:プレイヤー数,1,2,1,1
--check0:データをリセットする,0
--dialog:盤面データ名,local data="default";盤面色/col,board_color=0x006400;枠色/col,frame_color=0x000000;黒石色/col,stone_black_color=0x000000;白石色/col,stone_white_color=0xffffff;枠太さ,frame_width=4;外枠太さ,out_frame_width=10;選択時UI[0-2],mode_show_selection=1;単純なクリック挙動/chk,mode_click=0;プレイヤーが後手/chk,mode_player_is_white=0;CPU探索深度,cpu_think_depth=3;CPU待機時間,cpu_think_time=1;情報を表示/chk,mode_info=0;

require("rikky_module")

_DATA_DIR = obj.getinfo("script_path").."\othello\\"..data..".txt"  --データのディレクトリ
_COLOR = {black=2, white=1, none=0}  --色
_BOARD = {}  --盤面データ
_BOARDSIZE = 8  --盤面サイズ
_TURN_PLAYER, _TURN_CPU = _COLOR.black, _COLOR.white  --プレイヤー色
_DEPTH = math.floor(cpu_think_depth)  --探索深さ
_CPU_MIN_THINKTIME = cpu_think_time  --CPUの待機時間
_EVAL_FUNC_RANDOM = false  --評価値に乱数を付与

local objpos, zoom, objrot = {x=obj.x, y=obj.y, z=obj.z}, obj.getvalue("zoom")/100, {rx=obj.getvalue("rx"), ry=obj.getvalue("ry"), rz=obj.getvalue("rz")}
local size, stone_size, text_size, mode_cpu = obj.track0*zoom, obj.track1, obj.track2, 2-obj.track3
local fontsize = size * text_size
local direction = {{0, -1}, {1, -1}, {1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}}

if mode_player_is_white==1 then
	_TURN_PLAYER, _TURN_CPU = _COLOR.white, _COLOR.black
end
if _DEPTH>10 or _DEPTH<1 then
	_DEPTH=3
end
if size==0 then
	return
end

local function copyBoard(_b)
	local b = {}
	for y=1,_BOARDSIZE do
		b[y] = {}
		for x=1, _BOARDSIZE do
			b[y][x]=_b[y][x]
		end
	end

	return b
end

local function random()
	if(_EVAL_FUNC_RANDOM) then
		return math.random()
	else
		return 1
	end
end

local function setTurn(color)
	_G["_CURRENT_TURN"]=color
end

local function resetCPUPlacedTimer ()
	_G["_CPU_PLACED_TIME"]=os.time()
end

local function getCPUPlacedTimer()
	return os.difftime(os.time(), _CPU_PLACED_TIME)
end

local function loadBoardData()
	local fh=io.open(_DATA_DIR, "r")
	if fh==nil then
		return
	end

	local b, t = {}, {}

	local y = 1
	for line in fh:lines() do
		b[y]={}
		t[y] = line
		y = y + 1
	end

	for y=1,_BOARDSIZE do
		for x=1, _BOARDSIZE do
			b[y][x]=tonumber(t[y]:sub(x, x))
		end
	end
	setTurn( tonumber(t[_BOARDSIZE+1]) )

	fh:close()
	return b
end

local function saveBoardData(_b)
	local str = ""

	for y=1,_BOARDSIZE do
		for x=1,_BOARDSIZE do
			str = str..tostring( _b[y][x] )
		end
		str = str.."\n"
	end
	str = str.._CURRENT_TURN

	fh=io.open(_DATA_DIR, "w+")
	fh:write(str)
	fh:close()
end

local function drawBoard(_b)

	--盤面描画
	local s = size/2
	local bs = s+out_frame_width

	--背景
	obj.load("figure", "四角形", frame_color, 1)
	obj.drawpoly(-bs,-bs,0, bs,-bs,0, bs,bs,0, -bs,bs,0, 0,0, obj.w,0, obj.w,obj.h, 0,obj.h)

	----ボード
	obj.load("figure", "四角形", board_color, 1)
	obj.drawpoly(-s,-s,0, s,-s,0, s,s,0, -s,s,0, 0,0, obj.w,0, obj.w,obj.h, 0,obj.h)

  ----枠
	obj.load("figure", "四角形", frame_color, 1)
	for x=1,_BOARDSIZE+1 do
		local p = -s + (x-1)*(size/_BOARDSIZE)
		local fs = frame_width/2
		obj.drawpoly(p-fs,-s,0, p+fs,-s,0, p+fs,s,0, p-fs,s,0, 0,0, obj.w,0, obj.w,obj.h, 0,obj.h)
	end
	for y=1,_BOARDSIZE+1 do
		local p = -s + (y-1)*(size/_BOARDSIZE)
		local fs = frame_width/2
		obj.drawpoly(-s,p-fs,0, s,p-fs,0, s,p+fs,0, -s,p+fs,0, 0,0, obj.w,0, obj.w,obj.h, 0,obj.h)
	end

	--石
	for y=1,_BOARDSIZE do
		for x=1,_BOARDSIZE do
			c = _b[y][x]

			if c==_COLOR.black then
				obj.load("figure", "円", stone_black_color, (size/_BOARDSIZE)*stone_size)
			elseif c==_COLOR.white then
				obj.load("figure", "円", stone_white_color, (size/_BOARDSIZE)*stone_size)
			elseif c==_COLOR.none then
				obj.load("figure", "円", 0, 0)
			end

			local p = {
	 		   x = -s + (x-1)*(size/_BOARDSIZE)+(size/_BOARDSIZE/2),
				 y = -s + (y-1)*(size/_BOARDSIZE)+(size/_BOARDSIZE/2),
				 z = 0
			 }
			obj.draw(p.x,p.y,p.z)
		end
	end
end

local function boardInit()
	local b = {}
	for y=1,_BOARDSIZE do
			b[y] = {}
		for x=1,_BOARDSIZE do
			b[y][x] = _COLOR.none
		end
	end

	b[4][4] = _COLOR.white
	b[5][5] = _COLOR.white
	b[4][5] = _COLOR.black
	b[5][4] = _COLOR.black
	setTurn(_COLOR.black)

	return b
end

local function getMouseInfo()
	local mx, my = rikky_module.mouse()
	local ret = {
		clicked = rikky_module.key("LB")[1],
		x = mx,
		y = my
	}
	return ret
end

local function getSelectionPos(mouse)
	local s = size/2
	local cx, cy = mouse.x + s - obj.x, mouse.y + s - obj.y
	local lx, ly = size/_BOARDSIZE, size/_BOARDSIZE
	local px, py = math.floor(cx/lx) + 1, math.floor(cy/ly) + 1

	if px<1 or px>_BOARDSIZE or py<1 or py>_BOARDSIZE then
		px, py = -1, -1
	end

	if mode_show_selection==1 and mouse.clicked then
		if px~=-1 and py~=-1 then
			obj.load("figure", "四角形", 0xffffff, 50)

      x = -s + (px-1)*(size/_BOARDSIZE)+(size/_BOARDSIZE/2)
			y = -s + (py-1)*(size/_BOARDSIZE)+(size/_BOARDSIZE/2)
			ss = size/_BOARDSIZE/2
			obj.drawpoly(x-ss,y-ss,0, x+ss,y-ss,0, x+ss,y+ss,0, x-ss,y+ss,0, 0,0, obj.w,0, obj.w,obj.h, 0,obj.h, 0.7)
		end
	elseif mode_show_selection==2 then
		if px~=-1 and py~=-1 then
			obj.load("figure", "四角形", 0xffffff, 50)

			x = -s + (px-1)*(size/_BOARDSIZE)+(size/_BOARDSIZE/2)
			y = -s + (py-1)*(size/_BOARDSIZE)+(size/_BOARDSIZE/2)
			ss = size/_BOARDSIZE/2

			local tp = 0.4
			if mouse.clicked then
				tp = 0.7
			end

			obj.drawpoly(x-ss,y-ss,0, x+ss,y-ss,0, x+ss,y+ss,0, x-ss,y+ss,0, 0,0, obj.w,0, obj.w,obj.h, 0,obj.h, tp)
		end
	end

	return px, py
end

local function checkOnClicked(bool)
	if mode_click==0 then
		if bool==false then
			if OnClickedFlag==false then
				return {OnClicked=false, OnReleased=false}
			else
				_G["OnClickedFlag"] = false
				return {OnClicked=false, OnReleased=true}
			end
		else
			if OnClickedFlag==false then
				_G["OnClickedFlag"] = true
				return {OnClicked=true, OnReleased=false}
			else
				return {OnClicked=false, OnReleased=false}
			end
		end

	elseif mode_click==1 then
		if bool==false then
			return {OnClicked=false, OnReleased=false}
		else
			return {OnClicked=true, OnReleased=true}
		end
	end
end

local function reverse(_turn)
	if _turn==_COLOR.black then
		return _COLOR.white
	elseif _turn==_COLOR.white then
		return _COLOR.black
	end
end

local function checkCanPlace(board, _x, _y, _turn)
	local _b = copyBoard(board)
	local oppos = reverse(_turn)
	local fl=0

	for i=1, _BOARDSIZE do
		vx, vy = _x + direction[i][1], _y + direction[i][2]

		if vx>0 and vx<(_BOARDSIZE+1) and vy>0 and vy<(_BOARDSIZE+1) then
			if _b[vy][vx] == oppos then
				while 1 do
					vx, vy = vx + direction[i][1], vy + direction[i][2]
					if vx<1 or vx>_BOARDSIZE or vy<1 or vy>_BOARDSIZE then
						break
					end

					if _b[vy][vx]==_turn then
						fl=1
					elseif _b[vy][vx]==_COLOR.none then
						break
					end
				end
			end

		end
	end

	if _x>0 and _x<(_BOARDSIZE+1) and _y>0 and _y<(_BOARDSIZE+1) then
		if _b[_y][_x]~=_COLOR.none then
			fl=0
		end
	else
		fl=0
	end


	if fl==1 then
		return true
	else
		return false
	end
end

local function placeStone(board, _x, _y, _turn)
	local oppos = reverse(_turn)
	local _b = copyBoard(board)

	if checkCanPlace(_b, _x, _y, _turn) then
		for i=1,_BOARDSIZE do
			vx, vy = _x + direction[i][1], _y + direction[i][2]

			if vx>0 and vx<(_BOARDSIZE+1) and vy>0 and vy<(_BOARDSIZE+1) then
				if _b[vy][vx] == oppos then
					while 1 do
						vx, vy = vx + direction[i][1], vy + direction[i][2]
						if vx<1 or vx>_BOARDSIZE or vy<1 or vy>_BOARDSIZE then
							break
						end

						if _b[vy][vx]==_turn then
							vvx, vvy = _x + direction[i][1], _y + direction[i][2]
							_b[_y][_x] = _turn
							while 1 do
								if vvx<1 or vvx>_BOARDSIZE or vvy<1 or vvy>_BOARDSIZE then
									break
								end

								if _b[vvy][vvx]==oppos then
									_b[vvy][vvx]=_turn
								else
									break
								end
								vvx, vvy = vvx + direction[i][1], vvy + direction[i][2]
							end

						elseif _b[vy][vx]==_COLOR.none then
							break
						end
					end
				end

			end
		end

	end

	return _b
end

local function countPlacablePosition(_b, _turn)
	local cnt, t = 0 , {}

	for ay=1,_BOARDSIZE do
		for ax=1,_BOARDSIZE do
			if checkCanPlace(_b, ax, ay, _turn) then
				cnt = cnt + 1
				t[#t+1] = {y=ay, x=ax}
			end
		end
	end
	return cnt, t
end

local function countStoneAmount(_board)
	local b, w, n=0,0,0

	for y=1,_BOARDSIZE do
		for x=1,_BOARDSIZE do
			if _board[y][x]==_COLOR.black then
				b = b + 1
			elseif _board[y][x]==_COLOR.white then
				w = w + 1
			elseif _board[y][x]==_COLOR.none then
				n = n + 1
			end
		end
	end
	return {black=b, white=w, none=n}
end

local function evaluateBoard(_b, _turn)
	local oppos = reverse(_turn)
	local evaluationWeight = {bp=3, fs=5, cn=0.4, sa=0.5} --bp,fs:[0-5]  cn,sa:[0-1]

	--BP（盤位置）
	local bp = 0
	local bpData = {
		{45, -20, 4, -1, -1, 4, -20, 45},
		{-20, -30, -1, -3, -3, -1, -30, -20},
		{4, -1, 2, -1, -1, 2, -1, 4},
		{-1, -3, -1, 0, 0, -1, -3, -1},
		{-1, -3, -1, 0, 0, -1, -3, -1},
		{4, -1, 2, -1, -1, 2, -1, 4},
		{-20, -30, -1, -3, -3, -1, -30, -20},
		{45, -20, 4, -1, -1, 4, -20, 45}
	}

	for y=1,_BOARDSIZE do
		for x=1,_BOARDSIZE do
			if _b[y][x]==_turn then
				bp = bp + bpData[y][x]
			elseif _b[y][x]==oppos then
				bp = bp - bpData[y][x]
			end
		end
	end
	bp = bp * random() * 3

	--FS（確定石）
	fs = 0
	fsData = {{y=1, x=1}, {y=1, x=_BOARDSIZE}, {y=_BOARDSIZE, x=_BOARDSIZE}, {y=_BOARDSIZE, x=1}}
	fsVector = {{y=0, x=1}, {y=1, x=0}, {y=0, x=-1}, {y=-1, x=0}}
	for i=1,4 do
		if _b[fsData[i].y][fsData[i].x]~=_COLOR.none then
			startColor = _b[fsData[i].y][fsData[i].x]
			multiply = 1
			if startColor==oppos then
				multiply = -1
			end

			for j=0,_BOARDSIZE-2 do
				if _b[fsData[i].y+fsVector[i].y*j][fsData[i].x+fsVector[i].x*j]==startColor then
					fs = fs + multiply
				else
					break
				end
			end
		end
	end

	fs = (fs + random() * 3) * 11


	--CN
	cn = countPlacablePosition(_b, _turn)
	cn = ( cn + random()*2 ) * 10

	--SA
	local amount, sa = countStoneAmount(_b), 0
	if _turn==_COLOR.black then
		sa = amount.black
	elseif _turn==_COLOR.white then
		sa = amount.white
	end
	sa = (sa + random() * 3) * 4

	return bp*evaluationWeight.bp + fs*evaluationWeight.fs + cn*evaluationWeight.cn + sa*evaluationWeight.sa
end

local function minmax(_b, _turn, depth)
	local value, childValue = 0, 0
	local bestX, bestY = 0, 0

	if depth==0 then
		return evaluateBoard(_b, _turn)
	end

	if _turn==_TURN_PLAYER then
		value = -100000
	elseif _turn == _TURN_CPU then
		value = 100000
	end

	local placable, placablePos = countPlacablePosition(_b, _turn)

	--[[
	if placable==0 then
		debug_print("turn: "..tostring(_turn))
		str = ""
		for y=1,8 do
			for x=1,8 do
				str = str..tostring(_b[y][x])
			end
			debug_print(str)
			str = ""
		end
		debug_print(" ")
	end
	]]

	for i=1, placable do
		local px, py = placablePos[i].x, placablePos[i].y
		childValue = minmax(placeStone(_b, px, py, _turn), reverse(_turn), depth - 1)

		if _turn==_TURN_CPU then
			if childValue < value then
				value = childValue
				bestX, bestY = px, py
			end
		elseif _turn==_TURN_PLAYER then
			if childValue > value then
				value = childValue
				bestX, bestY = px, py
			end
		end
	end

	if depth==_DEPTH then
		if (bestX==0 or bestY==0) and placable~=0 then
			return placablePos[1].x, placablePos[1].y
		end
		return bestX, bestY
	else
		return value
	end
end

local function showInformation()
	local str = ""

	if _CURRENT_TURN==_COLOR.black then
		str = str.."Turn: Black"
	elseif _CURRENT_TURN==_COLOR.white then
		str = str.."Turn: White"
	end

	local stoneAmount = countStoneAmount(_BOARD)
	str = str.."\nBlack: "..tostring(stoneAmount.black).."  White: "..tostring(stoneAmount.white)
	str = str.."\nPlacable: "..tostring(countPlacablePosition(_BOARD, _CURRENT_TURN))--.."  Score: "..tostring(math.floor(evaluateBoard(_BOARD, _CURRENT_TURN)))

	rikky_module.textload(str, 1, 4, 0, "", fontsize)
	obj.draw(0, size/2+(fontsize*3)/2, 0)
end


if obj.check0 or io.open(_DATA_DIR, "r")==nil then
	saveBoardData(boardInit())
	resetCPUPlacedTimer()
end

obj.setoption("drawtarget", "tempbuffer", size+out_frame_width*2, size+out_frame_width*2)
_MOUSE = getMouseInfo()
_BOARD = loadBoardData()

drawBoard(_BOARD)
x, y = getSelectionPos(_MOUSE)

if mode_cpu==0 or (mode_cpu==1 and _CURRENT_TURN==_TURN_PLAYER) then
	if checkOnClicked(_MOUSE.clicked).OnReleased then
		if checkCanPlace(_BOARD, x, y, _CURRENT_TURN) then
			_BOARD = placeStone(_BOARD, x, y, _CURRENT_TURN)
			if countPlacablePosition(_BOARD, reverse(_CURRENT_TURN))>0 then
				setTurn(reverse(_CURRENT_TURN))
			end
			saveBoardData(_BOARD)
			resetCPUPlacedTimer()
		end
	end

elseif mode_cpu==1 and _CURRENT_TURN==_TURN_CPU then --CPUの手番
	if _CPU_PLACED_TIME==nil then
		resetCPUPlacedTimer()
	end

	if getCPUPlacedTimer()>_CPU_MIN_THINKTIME then
		local ppx, ppy = minmax(_BOARD, _CURRENT_TURN, _DEPTH)
		_BOARD = placeStone(_BOARD, ppx, ppy, _CURRENT_TURN)
		if countPlacablePosition(_BOARD, reverse(_CURRENT_TURN))>0 then
			setTurn(reverse(_CURRENT_TURN))
		end
		saveBoardData(_BOARD)
		resetCPUPlacedTimer()
	end
end

obj.load("tempbuffer")
obj.setoption("drawtarget","framebuffer")

obj.zoom = obj.zoom/zoom --拡大率無効化
obj.rx, obj.ry, obj.rz = obj.rx-objrot.rx, obj.ry-objrot.ry, obj.rz-objrot.rz  --回転無効化

obj.draw(0, 0, -objpos.z)

if mode_info==1 then
	showInformation()
end
