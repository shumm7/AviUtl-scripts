--track0:ÉTÉCÉY,1,1024,300,1
--track2:R/W,-1,1,0,1
--track3:ãOìπî‘çÜ,0,99,0,1
--dialog:è„èëÇ´ï€ë∂/chk,modeOverwrite=1;ÉRÅ[Éh[yÅÅ],fx="x";Xè„å¿,_maxX=100;Xâ∫å¿,_minX=0;Yè„å¿,_maxY=100;Yâ∫å¿,_minY=0;YîÕàÕÇé©ìÆåàíË/chk,modeAutoYRange=1;ï‚èïê¸/chk,ShowAssistLine=1;ç¿ïWï\é¶/chk,ShowPosition=1;ç¿ïWï\é¶ï˚ñ@[0-2],modePosition=1;

require("rikky_module")

local resolution = obj.totalframe
local size = obj.track0
local maxX, minX = _maxX, _minX
local save = obj.track2
local index = obj.track3

local DIR_LIB = obj.getinfo("script_path").."MathTrack.lua"
local DIR_LUA = obj.getinfo("script_path").."MathTrack\\track"..string.format("%02d", index)..".lua"
local color = {bgOut = "0x3e3e3e", bgIn = "0x331f0c", line = "0xff7c00", white = "0xffffff", red="0xff2b4d", blue="0x2929c1" ,lineWidth=2, cursorSize=15}
local fontFamily = "Yu Gothic UI"
local graphSize = size*0.95

local msg = ""
local frame, totalframe = obj.frame, obj.totalframe
local progress = frame / totalframe
local func1, func2 = loadstring("y = "..fx), loadstring("ty = "..fx)

if modeAutoYRange==0 then
  maxY, minY = _maxY, _minY
elseif modeAutoYRange==1 then
  x = minX
  func2()
  maxY, minY = ty, ty

  for i=1,resolution do
    local tempProgress = i/resolution
    x = (1-tempProgress)*minX + tempProgress*maxX
    func2()
    maxY, minY = math.max(maxY, ty), math.min(minY, ty)
  end
end

if minX>maxX then
  local temp = minX
  minX = maxX
  maxX = temp
end

local function exist(dir)
  f = io.open(dir, "r")
  if f==nil then
    return false
  end
  f:close()
  return true
end

local function write(dir, string, mode)
  f = io.open(dir, mode)
  if f==nil then
    return false
  end
  f:write(string)
  f:close()
  return true
end

----------------------
--     ì«Ç›çûÇ›     --
----------------------
if save==-1 then
  if exist(DIR_LUA) then
    data = dofile(DIR_LUA)
    rikky_module.setdialogparamCS("_maxX", data.maxX)
    rikky_module.setdialogparamCS("_minX", data.minX)
    rikky_module.setdialogparamCS("_maxY", data.maxY)
    rikky_module.setdialogparamCS("_minY", data.minY)
    rikky_module.setdialogparamCS("fx", data.func)
    rikky_module.setdialogparamCS("modeAutoYRange", data.autoY)
    msg = "Loaded"
  else
    msg = "MissingFile"
  end
end

------------------
--     ï`âÊ     --
------------------
--ï`âÊëŒè€ê›íË
obj.setoption("drawtarget", "tempbuffer",size,size)
--îwåi
obj.load("figure", "éläpå`", color.bgOut, size)
obj.draw()
--ì‡ë§îwåi
obj.load("figure", "éläpå`", color.bgIn, graphSize)
obj.draw()
--ì‡òg
obj.load("figure", "éläpå`", color.line, graphSize, color.lineWidth)
obj.draw()
--ãOìπî‘çÜ
obj.setfont(fontFamily.." Bold", size/5, 0, color.blue)
obj.load("text", tostring(index))
obj.draw(-graphSize/2+obj.w/2+10, -graphSize/2+obj.h/2, 0, 1, 0.5)

--ãOìπ
obj.load("figure", "â~", color.white, color.lineWidth*2)
for i=1,resolution do
  local tempProgress = i/resolution
  local gx = (1-tempProgress)*-graphSize/2 + tempProgress*graphSize/2

  x = (1-tempProgress)*minX + tempProgress*maxX
  func2()
  tempProgress = (ty-minY)/math.abs(maxY-minY)
  local gy = (1-tempProgress)*graphSize/2 + tempProgress*-graphSize/2
  if tempProgress<=1 and tempProgress>=0 then
    obj.draw(gx, gy, 0)
  end
end

--åªéûì_
x = (1-progress)*minX + progress*maxX
local gx = (1-progress)*-graphSize/2 + progress*graphSize/2
func1()
local tempProgress = (y-minY)/math.abs(maxY-minY)
local gy = (1-tempProgress)*graphSize/2 + tempProgress*-graphSize/2
obj.load("figure", "â~", color.line, color.cursorSize)
obj.draw(gx, gy, 0)

--ï‚èïê¸
if ShowAssistLine==1 then
  obj.load("figure", "éläpå`", color.line, 1)
  local c = color.lineWidth/2
  obj.drawpoly(-c+gx,graphSize/2,0, c+gx,graphSize/2,0, c+gx,-graphSize/2,0, -c+gx,-graphSize/2,0)
  if tempProgress<=1 and tempProgress>=0 then
    obj.drawpoly(-graphSize/2,c+gy,0, graphSize/2,c+gy,0, graphSize/2,-c+gy,0, -graphSize/2,-c+gy,0)
  end
end

--ç¿ïWï\é¶
if ShowPosition==1 then
  obj.setfont(fontFamily, size/10, 0, color.white)
  obj.load("text", "("..string.format("%.1f", x)..","..string.format("%.1f", y)..")")
  if modePosition == 0 then
    obj.draw(gx-obj.w/2, gy-obj.h/2, 0)
  elseif modePosition == 1 then
    obj.draw(gx-obj.w/2, gy-obj.h/2, 0, 1, 0.5)
  elseif modePosition == 2 then
    obj.draw(graphSize/2-obj.w/2, graphSize/2-obj.h/2, 0, 1, 0.5)
  end
end

----------------------
--     èëÇ´çûÇ›     --
----------------------
if save==1 then
  local string = "return {\n func=\""..fx.."\",\n maxX="..tostring(_maxX)..",\n minX="..tostring(_minX)..",\n maxY="..tostring(_maxY)..",\n minY="..tostring(_minY)..",\n autoY="..tostring(modeAutoYRange).."\n}"
  if exist(DIR_LUA) then
    if modeOverwrite==1 then
      if write(DIR_LUA, string, "w+") then
        msg = "OverWritten"
      else
        msg = "Failed"
      end
    else
      msg = "Failed"
    end
  else
    if write(DIR_LUA, string, "w") then
      msg = "Written"
    else
      msg = "Failed"
    end
  end
end

------------------
--     ï`âÊ     --
------------------
--ï€ë∂éûÇÃï\é¶
if msg~="" then
  obj.setfont(fontFamily.." Bold", size/8, 0, color.red)
  obj.load("text", msg)
  obj.draw(graphSize/2-obj.w/2-10, -graphSize/2+obj.h/2)
end

--ëSëÃÇÃï`âÊ
obj.setoption("drawtarget", "framebuffer")
obj.load("tempbuffer")

------------------
--     ïœêî     --
------------------
if MathTrack==nil then
  MathTrack = {}
end
MathTrack[index] = {
 func=fx,
 maxX=maxX,
 minX=minX,
 maxY=maxY,
 minY=minY,
 autoY=modeAutoYRange
}
