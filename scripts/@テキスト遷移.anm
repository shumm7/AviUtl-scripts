--[[
-----------------------------------------------
　　　　　　　　　テキスト遷移

　　作者：しゅう　　　　　　バージョン：2.3
-----------------------------------------------
テキスト遷移は、テキストを1文字ずつ、指定した順番で変化させることができます。
※動作には rikky_module と textmoduleが必要です。

◯ 使い方
　☆テキスト用（テキストオブジェクトを使用するタイプ）
  1. テキストオブジェクトを追加して、<?mes(T("変化させたい文字列"))?> と入力します。
  2. アニメーション効果から「テキスト用＠テキスト遷移」を追加します。
  3. 設定ダイアログから、コンマ区切りで変化途中に表示する文字を指定します。
  　　例えば A,B,C と指定すると、「A」→「B」→「C」→「変」のように文字が切り替わります。
  　　<n>を指定すると、変化前の文字（入力した文字）が使用されます。
  4. 時間、間隔、登場順を指定します。

  ☆単体用（図形オブジェクトなどを使用するタイプ）
  1. 適当なオブジェクトに、アニメーション効果の「単体用＠テキスト遷移」を追加します。
  2. 設定ダイアログの「元テキスト」から、変化させたい文字列を入力します。
  3. 設定ダイアログの「文字」から、コンマ区切りで変化途中に表示する文字を指定します。
  　　例えば A,B,C と指定すると、「A」→「B」→「C」→「変」のように文字が切り替わります。
  　　<n>を指定すると、変化前の文字（入力した文字）が使用されます。
  4. 時間、間隔、登場順を指定します。

◯ 設定項目
	☆ トラックバー
	　時間　：変化途中の文字の表示時間を指定します。
	　間隔　：変化開始までの時間を指定します。
	　サイズ：文字サイズ（単体用限定）
	　登場順：1.前から変化　2.後ろから変化　3.ランダム順で変化

	☆ ダイアログ（共通）
	 文字　　　　　：変化する文字をコンマ区切りで指定します。A,B,CとするとA→B→Cの順番に変化します。
   入退場　　　　：「時間」に-1を掛けて、再度エフェクトを適用します（入場と退場を同時に行う）。
	 遷移しない文字：1文字目を1として、変化をしない文字をコンマ区切りで指定します。 1,4 とすると、1文字目と4文字目は変化しません。
	 ランダム文字順：ONにすると、「文字」で指定した文字がランダムな順番で出現します。
	 シード　　　　：乱数用のシード値

  ☆ ダイアログ（単体用限定）
  　元テキスト　　：変化前のテキスト
  　フォント　　　：使用するフォント名を入力
  　文字装飾　　　：0.装飾なし　1.影付き文字　2.影付き文字(薄)　3.縁取り文字　4.縁取り文字(薄)
  　左右寄せ　　　：0.左寄せ　1.中央寄せ　2.右寄せ
  　上下寄せ　　　：0.上寄せ　1.中央寄せ　2.下寄せ
  　色　　　　　　：テキストの色
  　影・縁色　　　：文字装飾を1〜4にした際に使用される影/縁の色


◯ テスト環境
 AviUtl 1.10
   exedit 0.93rc1
 rikky_module 0.1.delta
 textmodule 1.1.1

◯ 更新履歴
 [v1.0 2021-08-26] リリース
 [v1.1 2021-08-26] 「時間」が負の数の際の処理を修正
 [v2.0-alpha 2021-08-26] 入退場の機能を追加、テキスト用と単体用に分離
 [v2.0 2021-08-27] 不具合修正
 [v2.1 2021-09-05] 間隔が負の数になったときの挙動を追加。変化中の文字に<comma>と入力すると、エスケープすることができる仕様を追加。
 [v2.2 2021-09-05] 不具合修正
 [v2.3 2022-02-20] textmodule 1.1.1に対応
]]

@単体用
--track0:時間[s],-5,5,0.05,0.01
--track1:間隔[s],-5,5,0.05,0.01
--track2:サイズ,0,256,34,1
--track3:登場順,1,3,1,1
--dialog:元テキスト,text="テキストを入力";文字,char_list="　,？";フォント,fontFamily="MS UI Gothic";文字装飾,textDecorate=0;左右寄せ[0-2],alignSideMode=1;上下寄せ[0-2],alignUpMode=1;色/col,color="0xffffff";影・縁色/col,colorDecorate="0x000000";入退場/chk,modeRev=0;遷移しない文字,skip_index="";ランダム文字順/chk,modeRandom=0;シード,seed=0;

require("textmodule")
require("rikky_module")

local function split(str)
  local repl = ","

  if string.find(str, repl) == nil then
      return { str }
  end

  local result = {}
  local pat = "(.-)" .. repl .. "()"
  local lastPos
  for part, pos in string.gmatch(str, pat) do
    local p = string.gsub(part, "<comma>", ",", 256)
    table.insert(result, p)
    lastPos = pos
  end
  local p = string.gsub(string.sub(str, lastPos), "<comma>", ",", 256)
  table.insert(result, p)
  return result
end

local function isSkipped(ind)
	local sd = split(skip_index)
	for j=1,#sd do
		if ind==tonumber(sd[j]) then return true end
	end
	return false
end

local starttime, div, textSize, mode = obj.track0, obj.track1, obj.track2, obj.track3
local char

if div<0 then
  div = -div
  local temp = split(char_list)
  char = {}
  for i=1, #temp do
    char[#temp-i+1] = temp[i]
  end
else
   char = split(char_list)
end

local function T(text, depth)
	local table = rikky_module.textsplit(text)
	local length = #table
	local ret, c, index = "", "", {}
	local cnt, time = 0, obj.time

	if mode==1 then --順番に登場
		for i=1, length do index[i]=i end
	elseif mode==2 then --逆順に登場
		for i=1, length do index[i]=length-(i-1) end
	elseif mode==3 then --ランダム順に登場
		for i=1,length do index[i]=i end
		for i=1, length do
			local dest = rand(1,length, seed,i)
	    local swap = index[i]
	    index[i] = index[dest]
	    index[dest] = swap
		end
	end

	for i=1,length do
		c = table[index[i]]

		if textmodule.string.len(c)==1 and not(isSkipped(index[i])) and c~="\n" then
			if modeRandom==1 then
				for j=1, #char do
					local dest = rand(1,#char, seed,i*10+j)
					local swap = char[j]
					char[j] = char[dest]
					char[dest] = swap
				end
			end

			if starttime>=0 then
				d = time-(div*cnt)

				if d>=0 then
					di = math.floor(d / starttime)+1
					if di<=#char then
						c = char[di]
					end
				else
					c = char[1]
				end
			else
				d = (obj.totaltime)+(-time-(div*cnt))-div*(#char-1)
				if d>=0 then
					di = math.floor(d / -starttime)+1
					if di<=#char then
						c = char[di]
					end
				else
					c = char[1]
				end
			end

      if c=="<n>" then
				c = table[index[i]]
			end

			table[index[i]] = c
			cnt=cnt+1
		end
	end

	for i=1,length do ret=ret..table[i] end
	if modeRev==1 and depth~=1 then
		starttime=-starttime

		ret = T(ret, 1)
	end
	return ret
end

obj.setfont(fontFamily, textSize, textDecorate, color, colorDecorate)
obj.load("text", T(text))

local temp = obj.w/2
if flagOpposX == 1 then
	temp = temp * -1
end

if alignSideMode==0 then
	alignSide = temp
elseif alignSideMode==2 then
	alignSide = -temp
end
--------------------------------------------------------------
local temp = obj.h/2
if flagOpposY == 1 then
	temp = -temp
end

if alignUpMode==2 then
	alignUp = -temp
elseif alignUpMode==0 then
	alignUp = temp
end

local s = alignSide
local u = alignUp
local sc = obj.getvalue("zoom") / 100
local r = math.rad(obj.rz)

if obj.w>0 then
	obj.ox = obj.ox + (s * math.cos(r)) * sc
	obj.oy = obj.oy + (s * math.sin(r)) * sc
else
	obj.ox = obj.ox - (s * math.cos(r)) * sc
	obj.oy = obj.oy - (s * math.sin(r)) * sc
end

if obj.h>0 then
	obj.ox = obj.ox + (u * math.sin(-r)) * sc
	obj.oy = obj.oy + (u * math.cos(-r)) * sc
else
	obj.ox = obj.ox - (u * math.sin(-r)) * sc
	obj.oy = obj.oy - (u * math.cos(-r)) * sc
end

obj.draw()


@テキスト用
--track0:時間[s],-5,5,0.05,0.01
--track1:間隔[s],-5,5,0.05,0.01
--track3:登場順,1,3,1,1
--dialog:文字,char_list="　,？";入退場/chk,modeRev=0;遷移しない文字,skip_index="";ランダム文字順/chk,modeRandom=0;シード,seed=0;

require("textmodule")
require("rikky_module")

local function split(str)
  local repl = ","

  if string.find(str, repl) == nil then
      return { str }
  end

  local result = {}
  local pat = "(.-)" .. repl .. "()"
  local lastPos
  for part, pos in string.gmatch(str, pat) do
    local p = string.gsub(part, "<comma>", ",", 256)
    table.insert(result, p)
    lastPos = pos
  end
  local p = string.gsub(string.sub(str, lastPos), "<comma>", ",", 256)
  table.insert(result, p)
  return result
end

local function isSkipped(ind)
	local sd = split(skip_index)
	for j=1,#sd do
		if ind==tonumber(sd[j]) then return true end
	end
	return false
end

local starttime, div, mode = obj.track0, obj.track1, obj.track3
local char

if div<0 then
  div = -div
  local temp = split(char_list)
  char = {}
  for i=1, #temp do
    char[#temp-i+1] = temp[i]
  end
else
   char = split(char_list)
end

function T(text, depth)
	local table = rikky_module.textsplit(text, {"n"})
	local length = #table
	local ret, c, index = "", "", {}
	local cnt, time = 0, obj.time

	if mode==1 then --順番に登場
		for i=1, length do index[i]=i end
	elseif mode==2 then --逆順に登場
		for i=1, length do index[i]=length-(i-1) end
	elseif mode==3 then --ランダム順に登場
		for i=1,length do index[i]=i end
		for i=1, length do
			local dest = rand(1,length, seed,i)
	    local swap = index[i]
	    index[i] = index[dest]
	    index[dest] = swap
		end
	end

	for i=1,length do
		c = table[index[i]]

		if textmodule.string.len(c)==1 and not(isSkipped(index[i])) and c~="\n" then
			if modeRandom==1 then
				for j=1, #char do
					local dest = rand(1,#char, seed,i*10+j)
					local swap = char[j]
					char[j] = char[dest]
					char[dest] = swap
				end
			end

			if starttime>=0 then
				d = time-(div*cnt)

				if d>=0 then
					di = math.floor(d / starttime)+1
					if di<=#char then
						c = char[di]
					end
				else
					c = char[1]
				end
			else
				d = (obj.totaltime)+(-time-(div*cnt))-div*(#char-1)
				if d>=0 then
					di = math.floor(d / -starttime)+1
					if di<=#char then
						c = char[di]
					end
				else
					c = char[1]
				end
			end

      if c=="<n>" then
				c = table[index[i]]
			end

			table[index[i]] = c
			cnt=cnt+1
		end
	end

	for i=1,length do ret=ret..table[i] end
	if modeRev==1 and depth~=1 then
		starttime=-starttime

		ret = T(ret, 1)
	end
	return ret
end
