--[[
「マインスイーパ.obj」は、AviUtlの再生ウィンドウ上で遊べるミニゲームです。
カスタムオブジェクトとして、利用することが出来ます。

※※※　必ず編集中のプロジェクトを保存してから使用してください　※※※


☆ 導入方法　☆
	1. 「rikky_module」を導入します。
  2. 「マインスイーパ.obj」をscriptフォルダかその下の階層のフォルダにいれてください。
	3. 「マインスイーパ..obj」と同じ場所に「shu_game」フォルダを配置してください。
	4. カスタムオブジェクトから「マインスイーパ.」を選択してください。

☆　テスト環境　☆
　AviUtl 1.10
	exedit 0.93rc1
	rikky_module 0.1.delta
	shu_game.lua v1.0

☆　遊び方　☆
	マインスイーパをタイムラインに置いたら、画面にマインスイーパの盤面が表示されているかを確認してください。

	タイムラインを再生させながら、オセロの盤面をマウスで左クリックすると、そのマスを開きます。
	盤面のデータは、常にshu_game/sweeperフォルダ内に保存されます。
	　（盤面データには、すべての配置が記録されています）

	「データをリセットする」のチェックボックスをONにすると、データを初手に書き換えて、保存します。
	プレイするときは、必ずOFFにしてください。

☆　設定項目　☆

＊トラックバー
　・サイズ　　　　1マスの大きさ
　・UIサイズ　　　1マスに占めるUI（爆弾や旗など）の大きさの割合
　・マス数　　　　マスの高さ（幅）
　・爆弾数　　　　爆弾の数

＊チェックボックス
　・データをリセットする　ONの間、常に盤面データを初手のものに書き換える

＊設定ダイアログ
　・盤面データ名　　　　　盤面データを保存する際の名前（拡張子などは不要）
　・マス色　　　　　　　　盤面の色
　・凸エッジ　　　　　　　凸エッジの強さ（サイズとの積が実際の凸エッジ幅になる）
　・フォント　　　　　　　文字のフォント
　・選択時UI　　　　　　　0:表示しない　　1:クリックしたマスが光る　　2:マウスで触れたマスが光る
　・単純なクリック挙動　　ON:マウスを離した瞬間にマスを開く　OFF:マウスがクリックされている時にマスを開く（離した瞬間を認識しない）
　・常に旗を置く　　　　　ON:左右のクリックで旗を置く　OFF:左クリックでマスを開き、右クリックで旗を置く
　・初手が必ず成功　　　　初めてマスを開く時、開こうとしたマスとその周囲に必ず爆弾が無いようにする（爆弾数が多すぎるとフリーズするので注意）

☆　注意点　☆
　・再生停止中でも一応プレイできますが、再生しながらのプレイをおすすめします。
　・マス数や爆弾数を多くしすぎると、動作が不安定に鳴ることがあります。
　・Z軸座標の変更には、今の所対応していません。
　　（画面の座標で検知しているため、拡大率を変えると位置がズレます）
　・本スクリプトで発生した損害に、いかなる責任も負いません。

☆　更新履歴　☆
　[2021-07-09] 0.1: 初版












]]



--track0:サイズ,0,500,50
--track1:UIサイズ,0,1,0.8,0.01
--track2:マス数,2,50,9,1
--track3:爆弾数,1,250,10,1
--check0:データをリセットする,0
--dialog:盤面データ名,local data="default";マス色/col,color="0xd2d2d2";凸エッジ,edge_width=0.1;フォント,font_family="MS UI Gothic";選択時UI[0-2],mode_show_selection=2;単純なクリック挙動/chk,mode_click=1;常に旗を置く/chk,mode_always_flag=0;初手が必ず成功/chk,mode_first_step=0;

_SWEEPER_COLOR = {empty=1, bomb=2, open_empty=3, open_bomb=4, flag_empty=5, flag_bomb=6}
_SWEEPER_DATA_FILE_DIR = obj.getinfo("script_path").."\shu_game\\sweeper\\"  --盤面データのディレクトリ
_SWEEPER_DATA_IMAGE_DIR = obj.getinfo("script_path").."\shu_game\\sweeper\\img\\"  --画像のディレクトリ
_SWEEPER_DATA_IMAGE_NAME = {bomb = "bomb.png", flag = "flag.png"}
_SWEEPER_LIB_FILE_DIR = obj.getinfo("script_path").."\shu_game\\"  --ライブラリデータのディレクトリ
_SWEEPER_BOARD = {}
_SWEEPER_BOARDSIZE, _SWEEPER_BOMB_AMOUNT = 0, 0
_SWEEPER_TEXT_COLOR = {0x0000ff, 0x008000, 0xff0000, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff, 0xff00ff}
_SWEEPER_BOARD_STATE = {start=1, ingame=2, clear=3, gameover=4}

local objpos, objrot = {x=obj.x, y=obj.y, z=obj.z}, {rx=obj.getvalue("rx"), ry=obj.getvalue("ry"), rz=obj.getvalue("rz")}
local zoom = obj.getvalue("zoom")/100
local size, ui_size = obj.track0*zoom, obj.track1
local vector = {{-1, 0}, {-1, -1}, {0, -1}, {1, 1}, {1, 0}, {1, -1}, {0, 1}, {-1, 1}}

if edge_width<0 then
	edge_width = 0
else
	edge_width = edge_width * size
end
if size==0 then
	return
end

require("rikky_module")
local lib = dofile(_SWEEPER_LIB_FILE_DIR.."shu_game.lua")

local function copyBoard(_b)
	local b = {}
	for y=1,_SWEEPER_BOARDSIZE do
		b[y] = {}
		for x=1, _SWEEPER_BOARDSIZE do
			b[y][x]=_b[y][x]
		end
	end

	return b
end

local function loadBoardData()
	local fh=io.open(_SWEEPER_DATA_FILE_DIR..data..".txt", "r")
	if fh==nil then
		return
	end

	local b, t = {}, {}
	local sz

	local y = 1
	for line in fh:lines() do
		if y==1 then
			sz = tonumber(line)
		else
			b[y-1] = {}
			t[y-1] = line
		end

		y = y + 1
	end

	for y=1,sz do
		for x=1,sz do
			b[y][x]=tonumber(t[y]:sub(x, x))
		end
	end

	fh:close()
	return b, sz
end

local function saveBoardData(_b)
	local str = ""

	str = str..tostring(_SWEEPER_BOARDSIZE).."\n"

	for y=1,_SWEEPER_BOARDSIZE do
		for x=1,_SWEEPER_BOARDSIZE do
			str = str..tostring( _b[y][x] )
		end
		str = str.."\n"
	end

	fh=io.open(_SWEEPER_DATA_FILE_DIR..data..".txt", "w+")
	fh:write(str)
	fh:close()
end

local function boardInit(size, bomb_amount)
	local b = {}
	for y=1,size do
		b[y] = {}
		for x=1,size do
			b[y][x] = _SWEEPER_COLOR.empty
		end
	end

	local k = 0
	while 1 do
		r = {
			x=math.floor(math.random(0, size+1)),
			y=math.floor(math.random(0, size+1))
		}

		if (r.x>0 and r.x<size+1 and r.y>0 and r.y<size+1) and b[r.y][r.x]~=_SWEEPER_COLOR.bomb then
			b[r.y][r.x] = _SWEEPER_COLOR.bomb
			k = k + 1
		end

		if k==bomb_amount or k-1>=_SWEEPER_BOARDSIZE^2 then
			break
		end
	end

	return b
end

local function getAroundBombAmount(_b, x, y)
	local bombCount = 0
	for i=1,8 do
		local ppx, ppy = x+vector[i][1], y+vector[i][2]
		if ppx>0 and ppx<_SWEEPER_BOARDSIZE+1 and ppy>0 and ppy<_SWEEPER_BOARDSIZE+1 then
			if _b[ppy][ppx]==_SWEEPER_COLOR.bomb or _b[ppy][ppx]==_SWEEPER_COLOR.open_bomb or _b[ppy][ppx]==_SWEEPER_COLOR.flag_bomb then
				bombCount = bombCount+1
			end
		end
	end

	return bombCount
end

local function drawBoard(_b)
	local s = (_SWEEPER_BOARDSIZE*size)/2
	local ps_raw = size / 2
	local ps = ps_raw * ui_size

	for y=1,_SWEEPER_BOARDSIZE do
		for x=1,_SWEEPER_BOARDSIZE do
			local p = {
	 		   x = -s + (x-1)*size + (size/2),
				 y = -s + (y-1)*size + (size/2),
				 z = 0
			 }

	 		obj.load("figure", "四角形", color, size)
			if _b[y][x]==_SWEEPER_COLOR.empty or _b[y][x]==_SWEEPER_COLOR.bomb then
				obj.effect("凸エッジ", "幅", edge_width)
				obj.draw(p.x,p.y,p.z)

			elseif _b[y][x]==_SWEEPER_COLOR.open_empty then
				obj.draw(p.x,p.y,p.z)
				local bombCount = getAroundBombAmount(_b, x, y)

				if bombCount>0 then
					obj.setfont(font_family, size * ui_size, 0, _SWEEPER_TEXT_COLOR[bombCount])
					obj.load("text", tostring(bombCount))
					obj.draw(p.x,p.y,p.z)
				end

			elseif _b[y][x]==_SWEEPER_COLOR.open_bomb then
				obj.draw(p.x,p.y,p.z)
				obj.load("image", _SWEEPER_DATA_IMAGE_DIR.._SWEEPER_DATA_IMAGE_NAME.bomb)
				obj.drawpoly(p.x-ps,p.y-ps,0, p.x+ps,p.y-ps,0, p.x+ps,p.y+ps,0, p.x-ps,p.y+ps,0, 0,0, obj.w,0, obj.w,obj.h, 0,obj.h)

			elseif _b[y][x]==_SWEEPER_COLOR.flag_empty or _b[y][x]==_SWEEPER_COLOR.flag_bomb then
				obj.effect("凸エッジ", "幅", edge_width)
				obj.draw(p.x,p.y,p.z)
				obj.load("image", _SWEEPER_DATA_IMAGE_DIR.._SWEEPER_DATA_IMAGE_NAME.flag)
				obj.drawpoly(p.x-ps,p.y-ps,0, p.x+ps,p.y-ps,0, p.x+ps,p.y+ps,0, p.x-ps,p.y+ps,0, 0,0, obj.w,0, obj.w,obj.h, 0,obj.h)
			end

		end
	end
end

local function openBomb(_b, x, y, mode)
	if x<1 or x>_SWEEPER_BOARDSIZE or y<1 or y>_SWEEPER_BOARDSIZE then
		return _b
	end

	if mode=="flag" then
		if _b[y][x]==_SWEEPER_COLOR.empty then
			_b[y][x] = _SWEEPER_COLOR.flag_empty
		elseif _b[y][x]==_SWEEPER_COLOR.bomb then
			_b[y][x] = _SWEEPER_COLOR.flag_bomb
		elseif _b[y][x]==_SWEEPER_COLOR.flag_empty then
			_b[y][x] = _SWEEPER_COLOR.empty
		elseif _b[y][x]==_SWEEPER_COLOR.flag_bomb then
			_b[y][x] = _SWEEPER_COLOR.bomb
		end

	elseif mode=="open" or mode==nil then
		if _b[y][x]==_SWEEPER_COLOR.empty then --空白を開く
			_b[y][x]=_SWEEPER_COLOR.open_empty

			if getAroundBombAmount(_b, x, y)==0 then

				for i=1,8 do
					_b = openBomb(_b, x+vector[i][1], y+vector[i][2], "open")
				end
			end

		elseif _b[y][x]==_SWEEPER_COLOR.bomb then --爆弾を開く
			for ay=1,_SWEEPER_BOARDSIZE do
				for ax=1,_SWEEPER_BOARDSIZE do
					if _b[ay][ax]==_SWEEPER_COLOR.empty then
						_b[ay][ax]=_SWEEPER_COLOR.open_empty
					elseif _b[ay][ax]==_SWEEPER_COLOR.bomb then
						_b[ay][ax]=_SWEEPER_COLOR.open_bomb
					elseif _b[ay][ax]==_SWEEPER_COLOR.flag_empty then
						_b[ay][ax]=_SWEEPER_COLOR.open_empty
					elseif _b[ay][ax]==_SWEEPER_COLOR.flag_bomb then
						_b[ay][ax]=_SWEEPER_COLOR.open_bomb
					end
				end
			end
		end

	end

	return _b
end

local function getSelectionPos(mouse)
	local s = (size*_SWEEPER_BOARDSIZE)/2
	local cx, cy = mouse.x + s - obj.x, mouse.y + s - obj.y
	local lx, ly = size, size
	local px, py = math.floor(cx/lx) + 1, math.floor(cy/ly) + 1

	if px<1 or px>_SWEEPER_BOARDSIZE or py<1 or py>_SWEEPER_BOARDSIZE then
		px, py = -1, -1
	end

	local p = {
		 x = -s + (px-1)*size + (size/2),
		 y = -s + (py-1)*size + (size/2),
		 z = 0
	 }

	if mode_show_selection==1 and mouse.click then
		if px~=-1 and py~=-1 then
			obj.load("figure", "四角形", 0xffffff, size)
			obj.draw(p.x, p.y, p.z, 1, 0.7)
		end
	elseif mode_show_selection==2 then
		if px~=-1 and py~=-1 then
			obj.load("figure", "四角形", 0xffffff, size)

			local tp = 0.4
			if mouse.click then
				tp = 0.7
			end

			obj.draw(p.x, p.y, p.z, 1, tp)

		end
	end


	return px, py
end

local function checkBoardState(_b)
	local c={0, 0, 0, 0, 0, 0}

	for y=1,_SWEEPER_BOARDSIZE do
		for x=1,_SWEEPER_BOARDSIZE do
			k = _b[y][x]
			c[k] = c[k] + 1
		end
	end

	if c[_SWEEPER_COLOR.open_bomb]>0 then
		return _SWEEPER_BOARD_STATE.gameover
	elseif c[_SWEEPER_COLOR.open_bomb]==0 and c[_SWEEPER_COLOR.flag_empty]==0 and c[_SWEEPER_COLOR.empty]==0 then
		return _SWEEPER_BOARD_STATE.clear
	elseif c[_SWEEPER_COLOR.open_bomb]==0 and c[_SWEEPER_COLOR.open_empty]==0 then
		return _SWEEPER_BOARD_STATE.start
	else
		return _SWEEPER_BOARD_STATE.ingame
	end
end


if obj.check0 or io.open(_SWEEPER_DATA_FILE_DIR..data..".txt", "r")==nil then
	_SWEEPER_BOARDSIZE = obj.track2
	_SWEEPER_BOARD = boardInit(_SWEEPER_BOARDSIZE, obj.track3)
	saveBoardData(_SWEEPER_BOARD)
else
	_SWEEPER_BOARD, _SWEEPER_BOARDSIZE = loadBoardData()
end

obj.setoption("drawtarget", "tempbuffer", size*_SWEEPER_BOARDSIZE, size*_SWEEPER_BOARDSIZE)
drawBoard(_SWEEPER_BOARD)

state = checkBoardState(_SWEEPER_BOARD)
_MOUSE = {right=lib.getMouseInfo("right"), left=lib.getMouseInfo("left")}
mx, my = getSelectionPos(_MOUSE.left)

if state~=_SWEEPER_BOARD_STATE.clear and state~=_SWEEPER_BOARD_STATE.gameover and (mx~=-1 and my~=-1) then
	if lib.checkOnClicked(_MOUSE.left.click, mode_click, "left").OnRelease then
		if mode_always_flag==0 then
			if state==_SWEEPER_BOARD_STATE.start then

				--初手に周囲に爆弾がある場合はリセット
				if mode_first_step==1 then
					while 1 do
						if getAroundBombAmount(_SWEEPER_BOARD, mx, my)==0 and _SWEEPER_BOARD[my][mx]==_SWEEPER_COLOR.empty then
							break
						end
						_SWEEPER_BOARD = boardInit(_SWEEPER_BOARDSIZE, obj.track3)
						saveBoardData(_SWEEPER_BOARD)
					end
				end

			end
			openBomb(_SWEEPER_BOARD, mx, my, "open")

		elseif mode_always_flag==1 then
			openBomb(_SWEEPER_BOARD, mx, my, "flag")
		end
		saveBoardData(_SWEEPER_BOARD)

	elseif lib.checkOnClicked(_MOUSE.right.click, mode_click, "right").OnRelease then
		openBomb(_SWEEPER_BOARD, mx, my, "flag")
		saveBoardData(_SWEEPER_BOARD)
	end
end

debug_print(checkBoardState(_SWEEPER_BOARD))

obj.load("tempbuffer")
obj.setoption("drawtarget","framebuffer")

obj.zoom = obj.zoom/zoom --拡大率無効化
obj.rx, obj.ry, obj.rz = obj.rx-objrot.rx, obj.ry-objrot.ry, obj.rz-objrot.rz  --回転無効化

obj.draw(0, 0, -objpos.z)
