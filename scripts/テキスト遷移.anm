--[[
-----------------------------------------------
　　　　　　　　　テキスト遷移

　　作者：しゅう　　　　　　バージョン：1.0
-----------------------------------------------
テキスト遷移は、テキストを1文字ずつ、指定した順番で変化させることができます。
※動作には rikky_module と textmoduleが必要です。

◯ 使い方
1. テキストオブジェクトを追加して、<?mes(T("変化させたい文字列"))?> と入力します。
2. 設定ダイアログから、テーブルで変化途中に表示する文字を指定します。
　　例えば {"A", "B", "C"} と指定すると、「A」→「B」→「C」→「変」のように文字が切り替わります。
3. 時間、間隔、登場順を指定します。

◯ 設定項目
	☆ トラックバー
	　時間　：変化途中の文字の表示時間を指定します。
	　間隔　：変化開始までの時間を指定します。
	　　　　：
	　登場順：1.前から変化　2.後ろから変化　3.ランダム順で変化

	☆ ダイアログ
	 文字　　　　　：変化する文字をテーブルで指定します。{"A", "B", "C"}とするとA→B→Cの順番に変化します。
	 遷移しない文字：1文字目を1として、変化をしない文字をテーブルで指定します。{1, 4}とすると、1文字目と4文字目は変化しません。
	 ランダム文字順：ONにすると、「文字」で指定した文字がランダムな順番で出現します。
	 シード　　　　：乱数用のシード値

◯ テスト環境
 AviUtl 1.10
   exedit 0.93rc1
 rikky_module 0.1.delta
 textmodule 0.1.3

]]

--track0:時間[s],-5,5,0.05,0.01
--track1:間隔[s],0,5,0.05,0.01
--track3:登場順,1,3,1,1
--dialog:文字,char_list={"　", "？"};遷移しない文字,skip_index={};ランダム文字順/chk,modeRandom=0;シード,seed=0;

local starttime, div, mode = obj.track0, obj.track1, obj.track3
local char = {}
require("textmodule")

if skip_index==nil then
	skip_index={}
end

local function isSkipped(ind)
	for j=1,#skip_index do
		if ind==skip_index[j] then return true end
	end
	return false
end

function T(text)
	local table = rikky_module.textsplit(text, {"n"})
	local length = #table
	local ret, c, index = "", "", {}
	local cnt, time = 0, obj.time

	if mode==1 then --順番に登場
		for i=1, length do index[i]=i end
	elseif mode==2 then --逆順に登場
		for i=1, length do index[i]=length-(i-1) end
	elseif mode==3 then --ランダム順に登場
		for i=1,length do index[i]=i end
		for i=1, length do
			local dest = rand(1,length, seed,i)
	    local swap = index[i]
	    index[i] = index[dest]
	    index[dest] = swap
		end
	end

	for i=1,length do
		c = table[index[i]]

		if textmodule.len(c)==1 and not(isSkipped(index[i])) then
			d = time-(div*cnt)

			if modeRandom==0 then
				char = char_list
			elseif modeRandom==1 then
				for j=1,#char_list do char[j]=char_list[j] end
				for j=1, #char_list do
					local dest = rand(1,#char_list, seed,i*10+j)
					local swap = char[j]
					char[j] = char[dest]
					char[dest] = swap
				end
			end

			if d>=0 then
				di = math.floor(d / starttime)+1
				if di<=#char then
					c = char[di]
				end
			else
				c = char[1]
			end

			table[index[i]] = c
			cnt=cnt+1
		end
	end

	for i=1,length do ret=ret..table[i] end
	return ret
end
