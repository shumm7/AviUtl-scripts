-- Square-Advanced Ver 2.4  Release-2021-06-03
--                 しゅう (Twitter: @shulmj_)
--
-- テスト環境
--     AviUtl 1.10, 拡張編集Plugin 0.93rc1 (Windows 10 Home)
--
--------------------------------------------------------------
--                          使い方                          --
--------------------------------------------------------------
--【Square-Lite】
--　特に機能を持たない四角形を追加します
-- "幅" と "高さ" で四角形のサイズを設定できます。
--
--
--
--【Square-Advanced】
-- 上記のLiteに加えて、"上下寄せ、左右寄せ機能" や "破線機能" が追加されています。
--
--＊ 左右寄せ ＊
-- ダイアログの "左右寄せ" の項目から、"幅" を変更したときに、どちらの方向へサイズを変化させるか設定できます。
--     0:左寄せ  1:中央寄せ  2:右寄せ
--
--＊ 上下寄せ ＊
-- ダイアログの "上下寄せ" の項目から、"高さ" を変更したときに、どちらの方向へサイズを変化させるか設定できます。
--     0:上寄せ  1:中央寄せ  2:下寄せ
--
--＊ 破線 ＊
-- ダイアログの "破線のサイズ" と "破線の間隔" を設定することで、縞々の模様を描画することができます。
-- ・破線を中央基準・・・破線を描画する基準の座標を指定します（ON：図形中央を基準とする、OFF：底辺を基準とする（ただし、"横破線"がONのときは左辺基準））
-- ・破線のサイズ・・・破線部の大きさを指定します（実線部分の大きさ）
-- ・破線の間隔・・・破線の間隔を指定します（透明の部分の大きさ）
-- ・横破線・・・破線の角度を90度回転させます
-- ・破線の位相（トラックバー）・・・破線の開始位置をずらします
-- ・破線の角度（トラックバー）・・・破線の角度を度数法で指定します
-- ・破線の数値を入換・・・"破線のサイズ" と "幅" を、"破線の間隔" と "高さ" をそれぞれ交換します。
-- ・背景・・・チェックすると、"背景色" で指定した色を、破線の透明部分に表示します
--
--
--【Square-Advanced Edge】
-- 上記のLiteに加えて、"上下寄せ、左右寄せ機能" や "線の幅指定機能" が追加されています。
--
--＊ 左右寄せ・上下寄せ ＊
--  ※ 上記の「Square-Advanced」の項を参照。
--
--＊ 線の幅指定 ＊
-- トラックバーの "線幅" と "線高さ" を指定すると、中空の図形を描画することができます。
-- ・線幅（トラックバー）・・・左辺と右辺の幅を指定します
-- ・線高さ（トラックバー）・・・上辺と下辺の幅を指定します
-- ・常に線幅値を使用・・・"線高さ" の数値を無視して、4辺すべてに "線幅" の値を適用します
-- ・表示する辺・・・表示する辺を配列で指定します（1:左辺, 2:上辺, 3:右辺, 4:下辺）
--        例：「{1,3}」のとき 左辺と右辺のみが表示される
-- ・背景・・・チェックすると、"背景色" で指定した色を、透明部分に表示します
--
--


@Square-Lite
--track0:幅,-4000,4000,100
--track1:高さ,-4000,4000,100
--dialog:色/col,color="0xfffffff";

local sizeX = obj.track0
local sizeY = obj.track1
local width = sizeX / 2
local height = sizeY / 2

if sizeX < 0 then
	sizeX=(-sizeX)
end
if sizeY < 0 then
	sizeY=(-sizeY)
end

if sizeX==0 or sizeY==0 then
	return
else
	obj.setoption("drawtarget", "tempbuffer", sizeX, sizeY)
	obj.load("figure", "四角形", color)
end

obj.drawpoly(-width,-height,0,width,-height,0,width,height,0,-width,height,0)
obj.load("tempbuffer")


@Square-Advanced
--track0:幅,-4000,4000,100
--track1:高さ,-4000,4000,100
--track2:破線の位相,-1000,1000,0
--track3:破線の角度,-1080,1080,0

--dialog:色/col,color="0xfffffff";左右寄せ[0-2],alignSideMode=1;上下寄せ[0-2],alignUpMode=1;破線を中央基準/chk,drawMode=1;横破線/chk,spaceVertical=0;破線のサイズ,spaceSize=0;破線の間隔,space=0;破線の数値を入換/chk,modeOverride=0;背景/chk,modeBG=0;背景色/col,colorBG="0xfffffff";

--------------------------------------------------------------
-- 変数
--------------------------------------------------------------
local sizeX = obj.track0
local sizeY = obj.track1
local spaceMove = obj.track2
local spaceDeg = obj.track3
local flagOpposX = 0
local flagOpposY = 0
local alignSide = 0
local alignUp = 0
local sc = obj.getvalue("zoom") / 100
local r = math.rad(obj.rz)

if alignUpMode==nil then
	alignUpMode = 1
end
if alignSideMode==nil then
	alignSideMode = 1
end
if spaceSize==nil then
	spaceSize = 0
end
if space==nil then
	space = 0
end

if color == nil then
	color="0xfffffff"
end

if sizeX < 0 then
	sizeX=(-sizeX)
	flagOpposX = 1
end
if sizeY < 0 then
	sizeY=(-sizeY)
	flagOpposY = 1
end
if spaceSize<0 then
	spaceSize = -spaceSize
end
if space < 0 then
	space = -space
end

--破線の数値を逆転
if modeOverride==1 then
	local a = sizeX
	local b = sizeY

	sizeX = spaceSize
	sizeY = space
	spaceSize = a
	space = b
end

--------------------------------------------------------------
-- 初期設定
--------------------------------------------------------------
local width = sizeX / 2
local height = sizeY / 2

if (sizeX * sizeY)==0 then
	return
else
	obj.setoption("drawtarget", "tempbuffer", sizeX, sizeY)
end

--local function test_draw(x,y,z)
--	obj.drawpoly(x-10,y-10,z, x+10,y-10,z, x+10,y+10,z, x-10,y+10,z)
--end

--------------------------------------------------------------
-- 寄せ
--------------------------------------------------------------
local temp = width
if flagOpposX == 1 then
	temp = temp * -1
end

if alignSideMode==0 then
	alignSide = temp
elseif alignSideMode==2 then
	alignSide = -temp
end
--------------------------------------------------------------
local temp = height
if flagOpposY == 1 then
	temp = -temp
end

if alignUpMode==2 then
	alignUp = -temp
elseif alignUpMode==0 then
	alignUp = temp
end

--------------------------------------------------------------
-- 描画
--------------------------------------------------------------
local function setSPPosition(cx,cy) --中心座標を指定
	local r_s = math.rad(spaceDeg) --破線の角度
	local sh = math.sqrt(sizeX * sizeX + sizeY * sizeY) --破線の長さ
	local sp_w = spaceSize / 2 --破線の幅
	local sp_m = spaceMove --破線の位相
	local sx,sy = 0, 0 --回転原点

  --回転なし 位相ずれあり 4点座標
	local px = {cx+sp_w+sp_m, cx-sp_w+sp_m, cx-sp_w+sp_m, cx+sp_w+sp_m}
	local py = {cy+sh, cy+sh, cy-sh, cy-sh}

	-- (sx,sy)を回転原点として回転（アフィン変換）
	for i=1,4 do
		local x,y = px[i], py[i]
		px[i] = x*math.cos(r_s) + y*-math.sin(r_s) + sx-sx*math.cos(r_s)+sy*math.sin(r_s)
		py[i] = x*math.sin(r_s) + y*math.cos(r_s) + sy-sx*math.sin(r_s)-sy*math.cos(r_s)
	end

	return px,py
end

local function drawBackground()
	if modeBG==1 then
		obj.load("figure", "四角形", colorBG)
		obj.drawpoly(-width,-height,0,width,-height,0,width,height,0,-width,height,0)
	end
end


local s = alignSide
local u = alignUp

if (spaceSize * space) == 0 then --四角形
	obj.load("figure", "四角形", color)
	obj.drawpoly(-width,-height,0,width,-height,0,width,height,0,-width,height,0)

else --破線
	if drawMode==0 then
		drawBackground()
		obj.load("figure", "四角形", color)

		local spaceDeg = spaceDeg % 360
		if spaceDeg < 0 then
			spaceDeg = spaceDeg + 360
		end
		if (spaceDeg > 180 and spaceDeg < 360) then
			spaceDeg = spaceDeg - 180
		end

		if spaceVertical == 0 then
			if (spaceDeg == 0) or (spaceDeg == 180) then
				local i = - (spaceSize + space) + (spaceMove % (spaceSize + space)) - width
				while i <= width do
					local ax = i
					local bx = ax + spaceSize

					obj.drawpoly(ax,-height,0,bx,-height,0,bx,height,0,ax,height, 0)

					i = ax + spaceSize + space
				end

			elseif (spaceDeg > 0) and (spaceDeg < 90) then
				local adjustPos = (height * 2) / math.tan( math.rad(90 - spaceDeg) )
				local i	= - (spaceSize + space) + (spaceMove % (spaceSize + space)) - width
				i	= i - (math.floor(adjustPos / spaceSize + space) + 1) *(spaceSize + space)
				while i <= width do
					local ax = i
					local bx = ax + spaceSize

					obj.drawpoly(ax + adjustPos,-height,0  ,bx + adjustPos,-height,0,  bx,height,0  ,ax,height, 0)

					i = ax + spaceSize + space
				end

			elseif (spaceDeg > 90) and (spaceDeg < 180) then
				local adjustPos = (height * 2) / math.tan( math.rad(90 - spaceDeg) )
				local i	= - (spaceSize + space) + (spaceMove % (spaceSize + space)) - width
				while i <= width - adjustPos do
					local ax = i
					local bx = ax + spaceSize

					obj.drawpoly(ax + adjustPos,-height,0  ,bx + adjustPos,-height,0,  bx,height,0  ,ax,height, 0)

					i = ax + spaceSize + space
				end

			elseif (spaceDeg == 90) or (spaceDeg == 270) then
				local i	= - (spaceSize + space) + (spaceMove % (spaceSize + space)) - height
				while i <= height do
					local ay = i
					local by = ay + spaceSize

					obj.drawpoly(-width,ay,0,width,ay,0,width,by,0,-width,by, 0)

					i = ay + spaceSize + space
				end
			end --横破線OFF
		elseif spaceVertical==1 then --横破線ON
			if (spaceDeg == 0) or (spaceDeg == 180) then
				local i	= - (spaceSize + space) + (spaceMove % (spaceSize + space)) - height
				while i <= height do
					local ay = i
					local by = ay + spaceSize

					obj.drawpoly(-width,ay,0,width,ay,0,width,by,0,-width,by, 0)

					i = ay + spaceSize + space
				end

			elseif (spaceDeg > 0) and (spaceDeg < 90) then
				local adjustPos = (width * 2) / math.tan( math.rad(90 - spaceDeg) )
				local i	= - (spaceSize + space) + (spaceMove % (spaceSize + space)) - height
				i	= i - (math.floor(adjustPos / spaceSize + space) + 1) *(spaceSize + space)
				while i <= height do
					local ay = i
					local by = ay + spaceSize

					obj.drawpoly(-width,ay,0,width,ay + adjustPos,0,width,by + adjustPos,0,-width,by, 0)

					i = ay + spaceSize + space
				end

			elseif (spaceDeg > 90) and (spaceDeg < 180) then
				local adjustPos = (width * 2) / math.tan( math.rad(90 - spaceDeg) )
				local i	= - (spaceSize + space) + (spaceMove % (spaceSize + space)) - height
				while i <= height - adjustPos do
					local ay = i
					local by = ay + spaceSize

					obj.drawpoly(-width,ay,0,width,ay + adjustPos,0,width,by + adjustPos,0,-width,by, 0)

					i = ay + spaceSize + space
				end

			elseif (spaceDeg == 90) or (spaceDeg == 270) then
				local i = - (spaceSize + space) + (spaceMove % (spaceSize + space)) - width
				while i <= width do
					local ax = i
					local bx = ax + spaceSize

					obj.drawpoly(ax,-height,0,bx,-height,0,bx,height,0,ax,height, 0)

					i = ax + spaceSize + space
				end
			end
		end --中央基準 OFF
	elseif drawMode == 1 then --中央基準 ON
		drawBackground()

		obj.load("figure", "四角形", color)

		if spaceVertical == 1 then
			spaceDeg = spaceDeg + 90
		end

		local r_s = math.rad(spaceDeg)
		local sp_w = spaceSize / 2
		local gap = space + spaceSize
		local sh = math.sqrt(sizeX * sizeX + sizeY * sizeY)

		if math.abs(spaceMove) > space+spaceSize then
			spaceMove = spaceMove - gap * math.floor(spaceMove/gap)
		end

		local max = math.ceil(sh / gap)
		local i = -max

		while i<max do
			cx,cy = i*gap, i*gap
			px,py = setSPPosition(cx,cy)
			obj.drawpoly(px[1],py[1],0, px[2],py[2],0, px[3],py[3],0, px[4],py[4],0)
			i=i+1
		end
	end
end

obj.load("tempbuffer")
--------------------------------------------------------------
-- 寄せ調整
--------------------------------------------------------------
if width>0 then
	obj.ox = obj.ox + (s * math.cos(r)) * sc
	obj.oy = obj.oy + (s * math.sin(r)) * sc
else
	obj.ox = obj.ox - (s * math.cos(r)) * sc
	obj.oy = obj.oy - (s * math.sin(r)) * sc
end

if height>0 then
	obj.ox = obj.ox + (u * math.sin(-r)) * sc
	obj.oy = obj.oy + (u * math.cos(-r)) * sc
else
	obj.ox = obj.ox - (u * math.sin(-r)) * sc
	obj.oy = obj.oy - (u * math.cos(-r)) * sc
end



@Square-Advanced-Edge
--track0:幅,-4000,4000,100
--track1:高さ,-4000,4000,100
--track2:線幅,0,4000,4000
--track3:線高さ,0,4000,4000

--dialog:色/col,color="0xfffffff";左右寄せ[0-2],alignSideMode=1;上下寄せ[0-2],alignUpMode=1;常に線幅値を使用/chk,lineWidthSync=0;表示する辺,displaySide={1,2,3,4};背景/chk,modeBG=0;背景色/col,colorBG="0xfffffff";

local sizeX = obj.track0
local sizeY = obj.track1
local lineWidth = obj.track2
local lineHeight = obj.track3
local flagOpposX = 0
local flagOpposY = 0
local width = sizeX / 2
local height = sizeY / 2
local alignSide = 0
local alignUp = 0
local sc = obj.getvalue("zoom") / 100
local r = math.rad(obj.rz)

if alignUpMode==nil then
	alignUpMode = 1
end
if alignSideMode==nil then
	alignSideMode = 1
end
if spaceSize==nil then
	spaceSize = 0
end
if space==nil then
	space = 0
end

if color == nil then
	color="0xfffffff"
end

if sizeX < 0 then
	sizeX=(-sizeX)
	flagOpposX = 1
end
if sizeY < 0 then
	sizeY=(-sizeY)
	flagOpposY = 1
end

if lineWidthSync==1 then
	lineHeight = lineWidth
end

--------------------------------------------------------------
-- 表示する辺
--------------------------------------------------------------
local function findIndex(num, tbl)
	for i,data in ipairs(tbl) do
		if data==num then
			return true
		end
	end
	return false
end

local displaySideTable = {}
for i=1,4 do
	table.insert(displaySideTable, findIndex(i,displaySide))
end

--------------------------------------------------------------
-- 初期設定
--------------------------------------------------------------
if (sizeX * sizeY)==0 or (lineWidth==0 and lineHeight==0) then
	return
else
	obj.setoption("drawtarget", "tempbuffer", sizeX, sizeY)
end

--------------------------------------------------------------
-- 寄せ
--------------------------------------------------------------
local temp = width
if flagOpposX == 1 then
	temp = temp * -1
end

if alignSideMode==0 then
	alignSide = temp
elseif alignSideMode==2 then
	alignSide = -temp
end
--------------------------------------------------------------
local temp = height
if flagOpposY == 1 then
	temp = -temp
end

if alignUpMode==2 then
	alignUp = -temp
elseif alignUpMode==0 then
	alignUp = temp
end

--------------------------------------------------------------
-- 描画
--------------------------------------------------------------
local function drawBackground()
	if modeBG==1 then
		obj.load("figure", "四角形", colorBG)
		obj.drawpoly(-width,-height,0,width,-height,0,width,height,0,-width,height,0)
	end
end


local s = alignSide
local u = alignUp
local w

if width<lineWidth and height<lineHeight then --Line
	obj.load("figure", "四角形", color)
	obj.drawpoly(-width,-height,0,width,-height,0,width,height,0,-width,height,0)

else
	drawBackground()
	obj.load("figure", "四角形", color)


	if flagOpposY==1 then
		w = -lineHeight
	else
		w = lineHeight
	end

	if displaySideTable[2] then
		obj.drawpoly(-width,-height,0,width,-height,0,width,-height+w,0,-width,-height+w,0) --UpSide
	end
	if displaySideTable[4] then
		obj.drawpoly(-width,height-w,0,width,height-w,0,width,height,0,-width,height,0) --DownSide
	end

	if flagOpposX==1 then
		w = -lineWidth
	else
		w = lineWidth
	end

	if displaySideTable[3] then
		obj.drawpoly(width-w,-height,0,width,-height,0,width,height,0,width-w,height,0)--RightSide
	end
	if displaySideTable[1] then
		obj.drawpoly(-width,-height,0,-width+w,-height,0,-width+w,height,0,-width,height,0)--LeftSide
	end

end


obj.load("tempbuffer")

--------------------------------------------------------------
-- 寄せ調整
--------------------------------------------------------------
if width>0 then
	obj.ox = obj.ox + (s * math.cos(r)) * sc
	obj.oy = obj.oy + (s * math.sin(r)) * sc
else
	obj.ox = obj.ox - (s * math.cos(r)) * sc
	obj.oy = obj.oy - (s * math.sin(r)) * sc
end

if height>0 then
	obj.ox = obj.ox + (u * math.sin(-r)) * sc
	obj.oy = obj.oy + (u * math.cos(-r)) * sc
else
	obj.ox = obj.ox - (u * math.sin(-r)) * sc
	obj.oy = obj.oy - (u * math.cos(-r)) * sc
end
